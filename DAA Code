#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_LOCATIONS 100 

typedef struct Edge {
    int destination;
    int weight;
    struct Edge* next;
} Edge;

typedef struct {
    Edge* head;
} Location;


typedef struct {
    Location locations[MAX_LOCATIONS];
    int num_locations;
} Graph;


typedef struct {
    int location;
    int distance;
} MinHeapNode;

typedef struct {
    MinHeapNode* array;
    int size;
    int capacity;
    int* position;
} MinHeap;

// Function prototypes
Graph* createGraph(int num_locations);
void addRoad(Graph* graph, int from, int to, int weight);
int calculateShortestPath(Graph* graph, int start, int end, int* path);
MinHeap* createMinHeap(int capacity);
void insertMinHeap(MinHeap* heap, int location, int distance);
MinHeapNode extractMin(MinHeap* heap);
void decreaseKey(MinHeap* heap, int location, int distance);
int isHeapEmpty(MinHeap* heap);

Graph* createGraph(int num_locations) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->num_locations = num_locations;
    for (int i = 0; i < num_locations; i++) {
        graph->locations[i].head = NULL;
    }
    return graph;
}


void addRoad(Graph* graph, int from, int to, int weight) {
    Edge* newEdge = (Edge*)malloc(sizeof(Edge));
    newEdge->destination = to;
    newEdge->weight = weight;
    newEdge->next = graph->locations[from].head;
    graph->locations[from].head = newEdge;

    newEdge = (Edge*)malloc(sizeof(Edge));
    newEdge->destination = from;
    newEdge->weight = weight;
    newEdge->next = graph->locations[to].head;
    graph->locations[to].head = newEdge;
}

MinHeap* createMinHeap(int capacity) {
    MinHeap* heap = (MinHeap*)malloc(sizeof(MinHeap));
    heap->size = 0;
    heap->capacity = capacity;
    heap->array = (MinHeapNode*)malloc(capacity * sizeof(MinHeapNode));
    heap->position = (int*)malloc(capacity * sizeof(int));
    return heap;
}

void swapMinHeapNode(MinHeapNode* a, MinHeapNode* b) {
    MinHeapNode temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(MinHeap* heap, int idx) {
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;

    if (left < heap->size && heap->array[left].distance < heap->array[smallest].distance)
        smallest = left;

    if (right < heap->size && heap->array[right].distance < heap->array[smallest].distance)
        smallest = right;

    if (smallest != idx) {
        MinHeapNode smallestNode = heap->array[smallest];
        MinHeapNode idxNode = heap->array[idx];

        heap->position[smallestNode.location] = idx;
        heap->position[idxNode.location] = smallest;

        swapMinHeapNode(&heap->array[smallest], &heap->array[idx]);
        heapify(heap, smallest);
    }
}

MinHeapNode extractMin(MinHeap* heap) {
    if (isHeapEmpty(heap)) {
        MinHeapNode empty = {-1, INT_MAX};
        return empty;
    }

    MinHeapNode root = heap->array[0];
    MinHeapNode lastNode = heap->array[--heap->size];

    heap->array[0] = lastNode;
    heap->position[root.location] = -1;
    heap->position[lastNode.location] = 0;

    heapify(heap, 0);
    return root;
}

void insertMinHeap(MinHeap* heap, int location, int distance) {
    int i = heap->size++;
    heap->array[i].location = location;
    heap->array[i].distance = distance;
    heap->position[location] = i;

    while (i && heap->array[i].distance < heap->array[(i - 1) / 2].distance) {
        heap->position[heap->array[i].location] = (i - 1) / 2;
        heap->position[heap->array[(i - 1) / 2].location] = i;
        swapMinHeapNode(&heap->array[i], &heap->array[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

void decreaseKey(MinHeap* heap, int location, int distance) {
    int i = heap->position[location];
    heap->array[i].distance = distance;

    while (i && heap->array[i].distance < heap->array[(i - 1) / 2].distance) {
        heap->position[heap->array[i].location] = (i - 1) / 2;
        heap->position[heap->array[(i - 1) / 2].location] = i;
        swapMinHeapNode(&heap->array[i], &heap->array[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

int isHeapEmpty(MinHeap* heap) {
    return heap->size == 0;
}

// Calculate the shortest path using Dijkstra's algorithm
int calculateShortestPath(Graph* graph, int start, int end, int* path) {
    int* distances = (int*)malloc(graph->num_locations * sizeof(int));
    int* previous = (int*)malloc(graph->num_locations * sizeof(int));
    MinHeap* heap = createMinHeap(graph->num_locations);

    for (int i = 0; i < graph->num_locations; i++) {
        distances[i] = INT_MAX;
        previous[i] = -1;
        insertMinHeap(heap, i, distances[i]);
    }

    distances[start] = 0;
    decreaseKey(heap, start, 0);

    while (!isHeapEmpty(heap)) {
        MinHeapNode minNode = extractMin(heap);
        int currentLocation = minNode.location;

        if (currentLocation == end) break;

        Edge* edge = graph->locations[currentLocation].head;
        while (edge) {
            int neighbor = edge->destination;
            int weight = edge->weight;

            if (distances[currentLocation] + weight < distances[neighbor]) {
                distances[neighbor] = distances[currentLocation] + weight;
                previous[neighbor] = currentLocation;
                decreaseKey(heap, neighbor, distances[neighbor]);
            }
            edge = edge->next;
        }
    }

    int pathIndex = 0;
    for (int at = end; at != -1; at = previous[at]) {
        path[pathIndex++] = at;
    }

    free(distances);
    free(previous);
    return distances[end];
}

int main() {
    Graph* graph = createGraph(6);

    addRoad(graph, 0, 1, 10);
    addRoad(graph, 0, 2, 15);
    addRoad(graph, 1, 3, 12);
    addRoad(graph, 2, 4, 10);
    addRoad(graph, 3, 4, 2);
    addRoad(graph, 3, 5, 1);
    addRoad(graph, 4, 5, 5);

    int path[MAX_LOCATIONS];
    int distance = calculateShortestPath(graph, 0, 5, path);

    printf("Shortest path: ");
    for (int i = 0; i < MAX_LOCATIONS && path[i] != 0; i++) {
        printf("%d ", path[i]);
    }
    printf("\nTotal distance/time: %d\n", distance);

    return 0;
}
